
--- EXECUTE THIS DAILY AT 00:15 -- DEPENDING ON HOW LONG IT TAKES FOR THE SOURCE TABLE TO LOAD
DELETE FROM USERS_LOCATION WHERE EVENT_DATETIME::DATE >= CURRENT_DATE-1 AND EVENT_DATETIME::DATE <= CURRENT_DATE-1 -- DELETE PREVIOUS DAYS DATA, THERE SHOULDN'T BE ANY DATA TO DELETE BUT JUST IN CASE THERE WAS A MANUAL LOAD
  INSERT INTO USERS_LOCATION
  SELECT FN_UUID() AS ROW_ID, EVENT_DATETIME, USER_ID,  POST_CODE, GETDATE() AS LOAD_DATE FROM USERS_EXTRACT;
--- EXECUTE THIS DAILY AT 00:15 -- DEPENDING ON HOW LONG IT TAKES FOR THE SOURCE TABLE TO LOAD

-- DELETE DUPLICATE IF AVAILABLE
DELETE FROM USERS_LOCATION WHERE ROW_ID IN
  (SELECT ROW_ID FROM
  (SELECT EVENT_ID, ROW_NUMBER() OVER (PARTITION BY A.USER_ID,A.EVENT_DATETIME,A.POST_CODE ORDER BY A.LOAD_DATE ASC) RNK FROM USERS_LOCATION  A ) WHERE RNK != 1);
-- DELETE DUPLICATE IF AVAILABLE

--- EXECUTE THIS DAILY AT 5 MINS PAST THE HOUR -- DEPENDING ON HOW LONG IT TAKES FOR THE SOURCE TABLE TO LOAD
DELETE FROM PAGEVIEWS WHERE EVENT_DATETIME::DATE >= CURRENT_DATE-1 AND EVENT_DATETIME::DATE <= CURRENT_DATE-1; -- DELETE PREVIOUS DAYS DATA, THERE SHOULDN'T BE ANY DATA TO DELETE BUT JUST IN CASE THERE WAS A MANUAL LOAD
  INSERT INTO PAGEVIEWS
  SELECT fn_uuid() AS EVENT_ID, USER_ID, PAGEVIEW_DATETIME, PAGE_URL, GETDATE() AS LOAD_DATE FROM FINANCE.PAGEVIEWS_EXTRACT;
--- EXECUTE THIS DAILY AT 5 MINS PAST THE HOUR -- DEPENDING ON HOW LONG IT TAKES FOR THE SOURCE TABLE TO LOAD

-- DELETE DUPLICATE IF AVAILABLE
DELETE FROM PAGEVIEWS WHERE EVENT_ID IN
  (SELECT EVENT_ID FROM
  (SELECT EVENT_ID, ROW_NUMBER() OVER (PARTITION BY USER_ID, PAGEVIEW_DATETIME,PAGE_URL ORDER BY A.LOAD_DATE ASC) RNK FROM PAGEVIEWS  A ) WHERE RNK != 1);
-- DELETE DUPLICATE IF AVAILABLE

--- INSERT YESTERDAYS AGGREGATED DATE INTO FINAL TABLE
DELETE FROM PV_PER_POSTCODE WHERE PV_DATETIME::DATE >= CURRENT_DATE-1 AND PV_DATETIME::DATE <= CURRENT_DATE-1
  INSERT INTO PV_PER_POSTCODE
  --DEPENDING ON HOW MANY ROWS RETURNED WE COULD ALSO CREATE A MATERIALIZED VIEW INSTEAD OF TABLE THEREFORE ELIMINATING AN EXTRACT ETL STEP
  WITH UL AS
            (SELECT USER_ID, DATE_TRUNC('hour',EVENT_DATETIME) EVENT_DATETIME, POST_CODE,
               ROW_NUMBER() OVER (PARTITION BY USER_ID ORDER BY DATE_TRUNC('hour',EVENT_DATETIME) DESC ) RNK FROM USERS_LOCATION
               WHERE DATE_TRUNC('hour',EVENT_DATETIME)>= CURRENT_DATE-1 AND DATE_TRUNC('hour',EVENT_DATETIME) <= CURRENT_DATE  )
  , PE AS (SELECT DATE_TRUNC('hour',PAGEVIEW_DATETIME) PV_DATETIME, USER_ID , COUNT(EVENT_ID) PVS FROM PAGEVIEWS
            WHERE DATE_TRUNC('hour',PAGEVIEW_DATETIME)>= CURRENT_DATE-1 AND DATE_TRUNC('hour',PAGEVIEW_DATETIME) <= CURRENT_DATE  )
            GROUP BY 1,2)
  SELECT
   PE.PV_DATETIME
  ,UL.POST_CODE
  ,SUM(CASE WHEN UL.RNK = 1 THEN PE.PVS ELSE 0 END ) LAST_POSTCODE_PVS
  ,SUM(PE.PVS) PVS
  ,GETDATE() AS LOAD_DATE
  FROM UL JOIN PE ON UL.USER_ID = PE.USER_ID AND PE.PV_DATETIME  =  UL.EVENT_DATETIME
  GROUP BY 1,2;
  ---- BECAUSE PAGEVIEW IS A CONTINOUS METRIC WE COULD INCREMENTALLY LOAD THIS TABLE DAILY
